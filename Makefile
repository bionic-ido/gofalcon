GO=GO111MODULE=on go
GOBUILD=$(GO) build

all: build

build:
	$(GOBUILD) ./...

clean-generate: remove-generated generate

generate: specs/swagger-stripped-oauth.json
	$(GO) run github.com/go-swagger/go-swagger/cmd/swagger generate client \
			-f $^ \
			-t falcon \
			--additional-initialism=CSPM \
			--additional-initialism=AWS \
			--additional-initialism=DDOS \
			--additional-initialism=IOM \
			--additional-initialism=GCP \
			--additional-initialism=IOA \
			--additional-initialism=API \
			--additional-initialism=DACL \
			--additional-initialism=ACL \
			--additional-initialism=YAML \
			--additional-initialism=IOC \
			--additional-initialism=ICMP \
			--additional-initialism=HTTPS \
			--additional-initialism=DNS \
			--additional-initialism=MITRE \
			--additional-initialism=AMSI \
			--additional-initialism=ODS \
			--additional-initialism=PF \
			--additional-initialism=XDR \
			--additional-initialism=SPAPI \
			--additional-initialism=MSSP \
			--additional-initialism=CSIX \
			--additional-initialism=CID

.PHONY: build generate remove-generated

remove-generated:
	grep -lr falcon -e 'Code generated by go-swagger; DO NOT EDIT.' | xargs rm --

specs/swagger-stripped-oauth.json: specs/swagger-patched.json
	# We remove security info from swagger before generating golang API interface.
	# This achieves cleaner interface. OAuth is then applied automatically through the middle-ware.
	jq 'walk(if type == "object" and has("security") and (has("consumes") or has("produces")) then del(.security) else . end)' $< > $@

specs/swagger-patched.json: specs/swagger.json ./specs/transformation.jq
	jq -f ./specs/transformation.jq $< > $@

specs/swagger.json:
	@echo "Sorry swagger.json needs to be obtained manually at this moment"
	@exit 1
