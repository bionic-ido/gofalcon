// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetD4CAWSConsoleSetupURLsReader is a Reader for the GetD4CAWSConsoleSetupURLs structure.
type GetD4CAWSConsoleSetupURLsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetD4CAWSConsoleSetupURLsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetD4CAWSConsoleSetupURLsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetD4CAWSConsoleSetupURLsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetD4CAWSConsoleSetupURLsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetD4CAWSConsoleSetupURLsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetD4CAWSConsoleSetupURLsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetD4CAWSConsoleSetupURLsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-connect-aws/entities/console-setup-urls/v1] GetD4CAwsConsoleSetupURLs", response, response.Code())
	}
}

// NewGetD4CAWSConsoleSetupURLsOK creates a GetD4CAWSConsoleSetupURLsOK with default headers values
func NewGetD4CAWSConsoleSetupURLsOK() *GetD4CAWSConsoleSetupURLsOK {
	return &GetD4CAWSConsoleSetupURLsOK{}
}

/*
GetD4CAWSConsoleSetupURLsOK describes a response with status code 200, with default header values.

OK
*/
type GetD4CAWSConsoleSetupURLsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get d4 c Aws console setup u r ls o k response has a 2xx status code
func (o *GetD4CAWSConsoleSetupURLsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get d4 c Aws console setup u r ls o k response has a 3xx status code
func (o *GetD4CAWSConsoleSetupURLsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c Aws console setup u r ls o k response has a 4xx status code
func (o *GetD4CAWSConsoleSetupURLsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c Aws console setup u r ls o k response has a 5xx status code
func (o *GetD4CAWSConsoleSetupURLsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c Aws console setup u r ls o k response a status code equal to that given
func (o *GetD4CAWSConsoleSetupURLsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get d4 c Aws console setup u r ls o k response
func (o *GetD4CAWSConsoleSetupURLsOK) Code() int {
	return 200
}

func (o *GetD4CAWSConsoleSetupURLsOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsOK  %+v", 200, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsOK  %+v", 200, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsOK) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetD4CAWSConsoleSetupURLsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CAWSConsoleSetupURLsMultiStatus creates a GetD4CAWSConsoleSetupURLsMultiStatus with default headers values
func NewGetD4CAWSConsoleSetupURLsMultiStatus() *GetD4CAWSConsoleSetupURLsMultiStatus {
	return &GetD4CAWSConsoleSetupURLsMultiStatus{}
}

/*
GetD4CAWSConsoleSetupURLsMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetD4CAWSConsoleSetupURLsMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get d4 c Aws console setup u r ls multi status response has a 2xx status code
func (o *GetD4CAWSConsoleSetupURLsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get d4 c Aws console setup u r ls multi status response has a 3xx status code
func (o *GetD4CAWSConsoleSetupURLsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c Aws console setup u r ls multi status response has a 4xx status code
func (o *GetD4CAWSConsoleSetupURLsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c Aws console setup u r ls multi status response has a 5xx status code
func (o *GetD4CAWSConsoleSetupURLsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c Aws console setup u r ls multi status response a status code equal to that given
func (o *GetD4CAWSConsoleSetupURLsMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get d4 c Aws console setup u r ls multi status response
func (o *GetD4CAWSConsoleSetupURLsMultiStatus) Code() int {
	return 207
}

func (o *GetD4CAWSConsoleSetupURLsMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsMultiStatus) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetD4CAWSConsoleSetupURLsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CAWSConsoleSetupURLsBadRequest creates a GetD4CAWSConsoleSetupURLsBadRequest with default headers values
func NewGetD4CAWSConsoleSetupURLsBadRequest() *GetD4CAWSConsoleSetupURLsBadRequest {
	return &GetD4CAWSConsoleSetupURLsBadRequest{}
}

/*
GetD4CAWSConsoleSetupURLsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetD4CAWSConsoleSetupURLsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get d4 c Aws console setup u r ls bad request response has a 2xx status code
func (o *GetD4CAWSConsoleSetupURLsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c Aws console setup u r ls bad request response has a 3xx status code
func (o *GetD4CAWSConsoleSetupURLsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c Aws console setup u r ls bad request response has a 4xx status code
func (o *GetD4CAWSConsoleSetupURLsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c Aws console setup u r ls bad request response has a 5xx status code
func (o *GetD4CAWSConsoleSetupURLsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c Aws console setup u r ls bad request response a status code equal to that given
func (o *GetD4CAWSConsoleSetupURLsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get d4 c Aws console setup u r ls bad request response
func (o *GetD4CAWSConsoleSetupURLsBadRequest) Code() int {
	return 400
}

func (o *GetD4CAWSConsoleSetupURLsBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsBadRequest) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetD4CAWSConsoleSetupURLsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CAWSConsoleSetupURLsForbidden creates a GetD4CAWSConsoleSetupURLsForbidden with default headers values
func NewGetD4CAWSConsoleSetupURLsForbidden() *GetD4CAWSConsoleSetupURLsForbidden {
	return &GetD4CAWSConsoleSetupURLsForbidden{}
}

/*
GetD4CAWSConsoleSetupURLsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetD4CAWSConsoleSetupURLsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c Aws console setup u r ls forbidden response has a 2xx status code
func (o *GetD4CAWSConsoleSetupURLsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c Aws console setup u r ls forbidden response has a 3xx status code
func (o *GetD4CAWSConsoleSetupURLsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c Aws console setup u r ls forbidden response has a 4xx status code
func (o *GetD4CAWSConsoleSetupURLsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c Aws console setup u r ls forbidden response has a 5xx status code
func (o *GetD4CAWSConsoleSetupURLsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c Aws console setup u r ls forbidden response a status code equal to that given
func (o *GetD4CAWSConsoleSetupURLsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get d4 c Aws console setup u r ls forbidden response
func (o *GetD4CAWSConsoleSetupURLsForbidden) Code() int {
	return 403
}

func (o *GetD4CAWSConsoleSetupURLsForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CAWSConsoleSetupURLsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CAWSConsoleSetupURLsTooManyRequests creates a GetD4CAWSConsoleSetupURLsTooManyRequests with default headers values
func NewGetD4CAWSConsoleSetupURLsTooManyRequests() *GetD4CAWSConsoleSetupURLsTooManyRequests {
	return &GetD4CAWSConsoleSetupURLsTooManyRequests{}
}

/*
GetD4CAWSConsoleSetupURLsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetD4CAWSConsoleSetupURLsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c Aws console setup u r ls too many requests response has a 2xx status code
func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c Aws console setup u r ls too many requests response has a 3xx status code
func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c Aws console setup u r ls too many requests response has a 4xx status code
func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c Aws console setup u r ls too many requests response has a 5xx status code
func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c Aws console setup u r ls too many requests response a status code equal to that given
func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get d4 c Aws console setup u r ls too many requests response
func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) Code() int {
	return 429
}

func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CAWSConsoleSetupURLsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CAWSConsoleSetupURLsInternalServerError creates a GetD4CAWSConsoleSetupURLsInternalServerError with default headers values
func NewGetD4CAWSConsoleSetupURLsInternalServerError() *GetD4CAWSConsoleSetupURLsInternalServerError {
	return &GetD4CAWSConsoleSetupURLsInternalServerError{}
}

/*
GetD4CAWSConsoleSetupURLsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetD4CAWSConsoleSetupURLsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get d4 c Aws console setup u r ls internal server error response has a 2xx status code
func (o *GetD4CAWSConsoleSetupURLsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c Aws console setup u r ls internal server error response has a 3xx status code
func (o *GetD4CAWSConsoleSetupURLsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c Aws console setup u r ls internal server error response has a 4xx status code
func (o *GetD4CAWSConsoleSetupURLsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c Aws console setup u r ls internal server error response has a 5xx status code
func (o *GetD4CAWSConsoleSetupURLsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get d4 c Aws console setup u r ls internal server error response a status code equal to that given
func (o *GetD4CAWSConsoleSetupURLsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get d4 c Aws console setup u r ls internal server error response
func (o *GetD4CAWSConsoleSetupURLsInternalServerError) Code() int {
	return 500
}

func (o *GetD4CAWSConsoleSetupURLsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-aws/entities/console-setup-urls/v1][%d] getD4CAwsConsoleSetupURLsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CAWSConsoleSetupURLsInternalServerError) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetD4CAWSConsoleSetupURLsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
