// Code generated by go-swagger; DO NOT EDIT.

package intel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PostMITREAttacksReader is a Reader for the PostMITREAttacks structure.
type PostMITREAttacksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostMITREAttacksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostMITREAttacksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPostMITREAttacksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostMITREAttacksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /intel/entities/mitre/v1] PostMitreAttacks", response, response.Code())
	}
}

// NewPostMITREAttacksOK creates a PostMITREAttacksOK with default headers values
func NewPostMITREAttacksOK() *PostMITREAttacksOK {
	return &PostMITREAttacksOK{}
}

/*
PostMITREAttacksOK describes a response with status code 200, with default header values.

OK
*/
type PostMITREAttacksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64
}

// IsSuccess returns true when this post Mitre attacks o k response has a 2xx status code
func (o *PostMITREAttacksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post Mitre attacks o k response has a 3xx status code
func (o *PostMITREAttacksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Mitre attacks o k response has a 4xx status code
func (o *PostMITREAttacksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post Mitre attacks o k response has a 5xx status code
func (o *PostMITREAttacksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post Mitre attacks o k response a status code equal to that given
func (o *PostMITREAttacksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post Mitre attacks o k response
func (o *PostMITREAttacksOK) Code() int {
	return 200
}

func (o *PostMITREAttacksOK) Error() string {
	return fmt.Sprintf("[POST /intel/entities/mitre/v1][%d] postMitreAttacksOK ", 200)
}

func (o *PostMITREAttacksOK) String() string {
	return fmt.Sprintf("[POST /intel/entities/mitre/v1][%d] postMitreAttacksOK ", 200)
}

func (o *PostMITREAttacksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	return nil
}

// NewPostMITREAttacksForbidden creates a PostMITREAttacksForbidden with default headers values
func NewPostMITREAttacksForbidden() *PostMITREAttacksForbidden {
	return &PostMITREAttacksForbidden{}
}

/*
PostMITREAttacksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostMITREAttacksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this post Mitre attacks forbidden response has a 2xx status code
func (o *PostMITREAttacksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post Mitre attacks forbidden response has a 3xx status code
func (o *PostMITREAttacksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Mitre attacks forbidden response has a 4xx status code
func (o *PostMITREAttacksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post Mitre attacks forbidden response has a 5xx status code
func (o *PostMITREAttacksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post Mitre attacks forbidden response a status code equal to that given
func (o *PostMITREAttacksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post Mitre attacks forbidden response
func (o *PostMITREAttacksForbidden) Code() int {
	return 403
}

func (o *PostMITREAttacksForbidden) Error() string {
	return fmt.Sprintf("[POST /intel/entities/mitre/v1][%d] postMitreAttacksForbidden  %+v", 403, o.Payload)
}

func (o *PostMITREAttacksForbidden) String() string {
	return fmt.Sprintf("[POST /intel/entities/mitre/v1][%d] postMitreAttacksForbidden  %+v", 403, o.Payload)
}

func (o *PostMITREAttacksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PostMITREAttacksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMITREAttacksTooManyRequests creates a PostMITREAttacksTooManyRequests with default headers values
func NewPostMITREAttacksTooManyRequests() *PostMITREAttacksTooManyRequests {
	return &PostMITREAttacksTooManyRequests{}
}

/*
PostMITREAttacksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PostMITREAttacksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this post Mitre attacks too many requests response has a 2xx status code
func (o *PostMITREAttacksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post Mitre attacks too many requests response has a 3xx status code
func (o *PostMITREAttacksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Mitre attacks too many requests response has a 4xx status code
func (o *PostMITREAttacksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post Mitre attacks too many requests response has a 5xx status code
func (o *PostMITREAttacksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post Mitre attacks too many requests response a status code equal to that given
func (o *PostMITREAttacksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the post Mitre attacks too many requests response
func (o *PostMITREAttacksTooManyRequests) Code() int {
	return 429
}

func (o *PostMITREAttacksTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /intel/entities/mitre/v1][%d] postMitreAttacksTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostMITREAttacksTooManyRequests) String() string {
	return fmt.Sprintf("[POST /intel/entities/mitre/v1][%d] postMitreAttacksTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostMITREAttacksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PostMITREAttacksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
