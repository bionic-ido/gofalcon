// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCSPMAWSConsoleSetupURLsReader is a Reader for the GetCSPMAWSConsoleSetupURLs structure.
type GetCSPMAWSConsoleSetupURLsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCSPMAWSConsoleSetupURLsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCSPMAWSConsoleSetupURLsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetCSPMAWSConsoleSetupURLsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCSPMAWSConsoleSetupURLsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCSPMAWSConsoleSetupURLsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCSPMAWSConsoleSetupURLsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCSPMAWSConsoleSetupURLsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1] GetCSPMAwsConsoleSetupURLs", response, response.Code())
	}
}

// NewGetCSPMAWSConsoleSetupURLsOK creates a GetCSPMAWSConsoleSetupURLsOK with default headers values
func NewGetCSPMAWSConsoleSetupURLsOK() *GetCSPMAWSConsoleSetupURLsOK {
	return &GetCSPMAWSConsoleSetupURLsOK{}
}

/*
GetCSPMAWSConsoleSetupURLsOK describes a response with status code 200, with default header values.

OK
*/
type GetCSPMAWSConsoleSetupURLsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get Cspm Aws console setup u r ls o k response has a 2xx status code
func (o *GetCSPMAWSConsoleSetupURLsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Cspm Aws console setup u r ls o k response has a 3xx status code
func (o *GetCSPMAWSConsoleSetupURLsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws console setup u r ls o k response has a 4xx status code
func (o *GetCSPMAWSConsoleSetupURLsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Cspm Aws console setup u r ls o k response has a 5xx status code
func (o *GetCSPMAWSConsoleSetupURLsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws console setup u r ls o k response a status code equal to that given
func (o *GetCSPMAWSConsoleSetupURLsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Cspm Aws console setup u r ls o k response
func (o *GetCSPMAWSConsoleSetupURLsOK) Code() int {
	return 200
}

func (o *GetCSPMAWSConsoleSetupURLsOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsOK) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetCSPMAWSConsoleSetupURLsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSConsoleSetupURLsMultiStatus creates a GetCSPMAWSConsoleSetupURLsMultiStatus with default headers values
func NewGetCSPMAWSConsoleSetupURLsMultiStatus() *GetCSPMAWSConsoleSetupURLsMultiStatus {
	return &GetCSPMAWSConsoleSetupURLsMultiStatus{}
}

/*
GetCSPMAWSConsoleSetupURLsMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetCSPMAWSConsoleSetupURLsMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get Cspm Aws console setup u r ls multi status response has a 2xx status code
func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Cspm Aws console setup u r ls multi status response has a 3xx status code
func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws console setup u r ls multi status response has a 4xx status code
func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Cspm Aws console setup u r ls multi status response has a 5xx status code
func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws console setup u r ls multi status response a status code equal to that given
func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get Cspm Aws console setup u r ls multi status response
func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) Code() int {
	return 207
}

func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetCSPMAWSConsoleSetupURLsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSConsoleSetupURLsBadRequest creates a GetCSPMAWSConsoleSetupURLsBadRequest with default headers values
func NewGetCSPMAWSConsoleSetupURLsBadRequest() *GetCSPMAWSConsoleSetupURLsBadRequest {
	return &GetCSPMAWSConsoleSetupURLsBadRequest{}
}

/*
GetCSPMAWSConsoleSetupURLsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCSPMAWSConsoleSetupURLsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get Cspm Aws console setup u r ls bad request response has a 2xx status code
func (o *GetCSPMAWSConsoleSetupURLsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws console setup u r ls bad request response has a 3xx status code
func (o *GetCSPMAWSConsoleSetupURLsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws console setup u r ls bad request response has a 4xx status code
func (o *GetCSPMAWSConsoleSetupURLsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Cspm Aws console setup u r ls bad request response has a 5xx status code
func (o *GetCSPMAWSConsoleSetupURLsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws console setup u r ls bad request response a status code equal to that given
func (o *GetCSPMAWSConsoleSetupURLsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get Cspm Aws console setup u r ls bad request response
func (o *GetCSPMAWSConsoleSetupURLsBadRequest) Code() int {
	return 400
}

func (o *GetCSPMAWSConsoleSetupURLsBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsBadRequest) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetCSPMAWSConsoleSetupURLsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSConsoleSetupURLsForbidden creates a GetCSPMAWSConsoleSetupURLsForbidden with default headers values
func NewGetCSPMAWSConsoleSetupURLsForbidden() *GetCSPMAWSConsoleSetupURLsForbidden {
	return &GetCSPMAWSConsoleSetupURLsForbidden{}
}

/*
GetCSPMAWSConsoleSetupURLsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCSPMAWSConsoleSetupURLsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get Cspm Aws console setup u r ls forbidden response has a 2xx status code
func (o *GetCSPMAWSConsoleSetupURLsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws console setup u r ls forbidden response has a 3xx status code
func (o *GetCSPMAWSConsoleSetupURLsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws console setup u r ls forbidden response has a 4xx status code
func (o *GetCSPMAWSConsoleSetupURLsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Cspm Aws console setup u r ls forbidden response has a 5xx status code
func (o *GetCSPMAWSConsoleSetupURLsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws console setup u r ls forbidden response a status code equal to that given
func (o *GetCSPMAWSConsoleSetupURLsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get Cspm Aws console setup u r ls forbidden response
func (o *GetCSPMAWSConsoleSetupURLsForbidden) Code() int {
	return 403
}

func (o *GetCSPMAWSConsoleSetupURLsForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMAWSConsoleSetupURLsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSConsoleSetupURLsTooManyRequests creates a GetCSPMAWSConsoleSetupURLsTooManyRequests with default headers values
func NewGetCSPMAWSConsoleSetupURLsTooManyRequests() *GetCSPMAWSConsoleSetupURLsTooManyRequests {
	return &GetCSPMAWSConsoleSetupURLsTooManyRequests{}
}

/*
GetCSPMAWSConsoleSetupURLsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCSPMAWSConsoleSetupURLsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get Cspm Aws console setup u r ls too many requests response has a 2xx status code
func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws console setup u r ls too many requests response has a 3xx status code
func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws console setup u r ls too many requests response has a 4xx status code
func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Cspm Aws console setup u r ls too many requests response has a 5xx status code
func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws console setup u r ls too many requests response a status code equal to that given
func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get Cspm Aws console setup u r ls too many requests response
func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) Code() int {
	return 429
}

func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMAWSConsoleSetupURLsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSConsoleSetupURLsInternalServerError creates a GetCSPMAWSConsoleSetupURLsInternalServerError with default headers values
func NewGetCSPMAWSConsoleSetupURLsInternalServerError() *GetCSPMAWSConsoleSetupURLsInternalServerError {
	return &GetCSPMAWSConsoleSetupURLsInternalServerError{}
}

/*
GetCSPMAWSConsoleSetupURLsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCSPMAWSConsoleSetupURLsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountConsoleURL
}

// IsSuccess returns true when this get Cspm Aws console setup u r ls internal server error response has a 2xx status code
func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws console setup u r ls internal server error response has a 3xx status code
func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws console setup u r ls internal server error response has a 4xx status code
func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Cspm Aws console setup u r ls internal server error response has a 5xx status code
func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Cspm Aws console setup u r ls internal server error response a status code equal to that given
func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get Cspm Aws console setup u r ls internal server error response
func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) Code() int {
	return 500
}

func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/console-setup-urls/v1][%d] getCspmAwsConsoleSetupURLsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) GetPayload() *models.RegistrationAWSAccountConsoleURL {
	return o.Payload
}

func (o *GetCSPMAWSConsoleSetupURLsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountConsoleURL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
