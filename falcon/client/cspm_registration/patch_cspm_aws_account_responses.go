// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// PatchCSPMAWSAccountReader is a Reader for the PatchCSPMAWSAccount structure.
type PatchCSPMAWSAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCSPMAWSAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPatchCSPMAWSAccountCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewPatchCSPMAWSAccountMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchCSPMAWSAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchCSPMAWSAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchCSPMAWSAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchCSPMAWSAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /cloud-connect-cspm-aws/entities/account/v1] PatchCSPMAwsAccount", response, response.Code())
	}
}

// NewPatchCSPMAWSAccountCreated creates a PatchCSPMAWSAccountCreated with default headers values
func NewPatchCSPMAWSAccountCreated() *PatchCSPMAWSAccountCreated {
	return &PatchCSPMAWSAccountCreated{}
}

/*
PatchCSPMAWSAccountCreated describes a response with status code 201, with default header values.

Created
*/
type PatchCSPMAWSAccountCreated struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this patch Cspm Aws account created response has a 2xx status code
func (o *PatchCSPMAWSAccountCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch Cspm Aws account created response has a 3xx status code
func (o *PatchCSPMAWSAccountCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Cspm Aws account created response has a 4xx status code
func (o *PatchCSPMAWSAccountCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch Cspm Aws account created response has a 5xx status code
func (o *PatchCSPMAWSAccountCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Cspm Aws account created response a status code equal to that given
func (o *PatchCSPMAWSAccountCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the patch Cspm Aws account created response
func (o *PatchCSPMAWSAccountCreated) Code() int {
	return 201
}

func (o *PatchCSPMAWSAccountCreated) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountCreated  %+v", 201, o.Payload)
}

func (o *PatchCSPMAWSAccountCreated) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountCreated  %+v", 201, o.Payload)
}

func (o *PatchCSPMAWSAccountCreated) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *PatchCSPMAWSAccountCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCSPMAWSAccountMultiStatus creates a PatchCSPMAWSAccountMultiStatus with default headers values
func NewPatchCSPMAWSAccountMultiStatus() *PatchCSPMAWSAccountMultiStatus {
	return &PatchCSPMAWSAccountMultiStatus{}
}

/*
PatchCSPMAWSAccountMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type PatchCSPMAWSAccountMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this patch Cspm Aws account multi status response has a 2xx status code
func (o *PatchCSPMAWSAccountMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch Cspm Aws account multi status response has a 3xx status code
func (o *PatchCSPMAWSAccountMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Cspm Aws account multi status response has a 4xx status code
func (o *PatchCSPMAWSAccountMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch Cspm Aws account multi status response has a 5xx status code
func (o *PatchCSPMAWSAccountMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Cspm Aws account multi status response a status code equal to that given
func (o *PatchCSPMAWSAccountMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the patch Cspm Aws account multi status response
func (o *PatchCSPMAWSAccountMultiStatus) Code() int {
	return 207
}

func (o *PatchCSPMAWSAccountMultiStatus) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *PatchCSPMAWSAccountMultiStatus) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *PatchCSPMAWSAccountMultiStatus) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *PatchCSPMAWSAccountMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCSPMAWSAccountBadRequest creates a PatchCSPMAWSAccountBadRequest with default headers values
func NewPatchCSPMAWSAccountBadRequest() *PatchCSPMAWSAccountBadRequest {
	return &PatchCSPMAWSAccountBadRequest{}
}

/*
PatchCSPMAWSAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchCSPMAWSAccountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this patch Cspm Aws account bad request response has a 2xx status code
func (o *PatchCSPMAWSAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Cspm Aws account bad request response has a 3xx status code
func (o *PatchCSPMAWSAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Cspm Aws account bad request response has a 4xx status code
func (o *PatchCSPMAWSAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Cspm Aws account bad request response has a 5xx status code
func (o *PatchCSPMAWSAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Cspm Aws account bad request response a status code equal to that given
func (o *PatchCSPMAWSAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch Cspm Aws account bad request response
func (o *PatchCSPMAWSAccountBadRequest) Code() int {
	return 400
}

func (o *PatchCSPMAWSAccountBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountBadRequest  %+v", 400, o.Payload)
}

func (o *PatchCSPMAWSAccountBadRequest) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountBadRequest  %+v", 400, o.Payload)
}

func (o *PatchCSPMAWSAccountBadRequest) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *PatchCSPMAWSAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCSPMAWSAccountForbidden creates a PatchCSPMAWSAccountForbidden with default headers values
func NewPatchCSPMAWSAccountForbidden() *PatchCSPMAWSAccountForbidden {
	return &PatchCSPMAWSAccountForbidden{}
}

/*
PatchCSPMAWSAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchCSPMAWSAccountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this patch Cspm Aws account forbidden response has a 2xx status code
func (o *PatchCSPMAWSAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Cspm Aws account forbidden response has a 3xx status code
func (o *PatchCSPMAWSAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Cspm Aws account forbidden response has a 4xx status code
func (o *PatchCSPMAWSAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Cspm Aws account forbidden response has a 5xx status code
func (o *PatchCSPMAWSAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Cspm Aws account forbidden response a status code equal to that given
func (o *PatchCSPMAWSAccountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch Cspm Aws account forbidden response
func (o *PatchCSPMAWSAccountForbidden) Code() int {
	return 403
}

func (o *PatchCSPMAWSAccountForbidden) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountForbidden  %+v", 403, o.Payload)
}

func (o *PatchCSPMAWSAccountForbidden) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountForbidden  %+v", 403, o.Payload)
}

func (o *PatchCSPMAWSAccountForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PatchCSPMAWSAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCSPMAWSAccountTooManyRequests creates a PatchCSPMAWSAccountTooManyRequests with default headers values
func NewPatchCSPMAWSAccountTooManyRequests() *PatchCSPMAWSAccountTooManyRequests {
	return &PatchCSPMAWSAccountTooManyRequests{}
}

/*
PatchCSPMAWSAccountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PatchCSPMAWSAccountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this patch Cspm Aws account too many requests response has a 2xx status code
func (o *PatchCSPMAWSAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Cspm Aws account too many requests response has a 3xx status code
func (o *PatchCSPMAWSAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Cspm Aws account too many requests response has a 4xx status code
func (o *PatchCSPMAWSAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Cspm Aws account too many requests response has a 5xx status code
func (o *PatchCSPMAWSAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Cspm Aws account too many requests response a status code equal to that given
func (o *PatchCSPMAWSAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch Cspm Aws account too many requests response
func (o *PatchCSPMAWSAccountTooManyRequests) Code() int {
	return 429
}

func (o *PatchCSPMAWSAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchCSPMAWSAccountTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchCSPMAWSAccountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *PatchCSPMAWSAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCSPMAWSAccountInternalServerError creates a PatchCSPMAWSAccountInternalServerError with default headers values
func NewPatchCSPMAWSAccountInternalServerError() *PatchCSPMAWSAccountInternalServerError {
	return &PatchCSPMAWSAccountInternalServerError{}
}

/*
PatchCSPMAWSAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchCSPMAWSAccountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this patch Cspm Aws account internal server error response has a 2xx status code
func (o *PatchCSPMAWSAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Cspm Aws account internal server error response has a 3xx status code
func (o *PatchCSPMAWSAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Cspm Aws account internal server error response has a 4xx status code
func (o *PatchCSPMAWSAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch Cspm Aws account internal server error response has a 5xx status code
func (o *PatchCSPMAWSAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch Cspm Aws account internal server error response a status code equal to that given
func (o *PatchCSPMAWSAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch Cspm Aws account internal server error response
func (o *PatchCSPMAWSAccountInternalServerError) Code() int {
	return 500
}

func (o *PatchCSPMAWSAccountInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchCSPMAWSAccountInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /cloud-connect-cspm-aws/entities/account/v1][%d] patchCspmAwsAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchCSPMAWSAccountInternalServerError) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *PatchCSPMAWSAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
