// Code generated by go-swagger; DO NOT EDIT.

package cspm_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetCSPMAWSAccountReader is a Reader for the GetCSPMAWSAccount structure.
type GetCSPMAWSAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCSPMAWSAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCSPMAWSAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetCSPMAWSAccountMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCSPMAWSAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCSPMAWSAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCSPMAWSAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCSPMAWSAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cloud-connect-cspm-aws/entities/account/v1] GetCSPMAwsAccount", response, response.Code())
	}
}

// NewGetCSPMAWSAccountOK creates a GetCSPMAWSAccountOK with default headers values
func NewGetCSPMAWSAccountOK() *GetCSPMAWSAccountOK {
	return &GetCSPMAWSAccountOK{}
}

/*
GetCSPMAWSAccountOK describes a response with status code 200, with default header values.

OK
*/
type GetCSPMAWSAccountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this get Cspm Aws account o k response has a 2xx status code
func (o *GetCSPMAWSAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Cspm Aws account o k response has a 3xx status code
func (o *GetCSPMAWSAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws account o k response has a 4xx status code
func (o *GetCSPMAWSAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Cspm Aws account o k response has a 5xx status code
func (o *GetCSPMAWSAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws account o k response a status code equal to that given
func (o *GetCSPMAWSAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Cspm Aws account o k response
func (o *GetCSPMAWSAccountOK) Code() int {
	return 200
}

func (o *GetCSPMAWSAccountOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAWSAccountOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountOK  %+v", 200, o.Payload)
}

func (o *GetCSPMAWSAccountOK) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *GetCSPMAWSAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSAccountMultiStatus creates a GetCSPMAWSAccountMultiStatus with default headers values
func NewGetCSPMAWSAccountMultiStatus() *GetCSPMAWSAccountMultiStatus {
	return &GetCSPMAWSAccountMultiStatus{}
}

/*
GetCSPMAWSAccountMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetCSPMAWSAccountMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this get Cspm Aws account multi status response has a 2xx status code
func (o *GetCSPMAWSAccountMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Cspm Aws account multi status response has a 3xx status code
func (o *GetCSPMAWSAccountMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws account multi status response has a 4xx status code
func (o *GetCSPMAWSAccountMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Cspm Aws account multi status response has a 5xx status code
func (o *GetCSPMAWSAccountMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws account multi status response a status code equal to that given
func (o *GetCSPMAWSAccountMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get Cspm Aws account multi status response
func (o *GetCSPMAWSAccountMultiStatus) Code() int {
	return 207
}

func (o *GetCSPMAWSAccountMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAWSAccountMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *GetCSPMAWSAccountMultiStatus) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *GetCSPMAWSAccountMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSAccountBadRequest creates a GetCSPMAWSAccountBadRequest with default headers values
func NewGetCSPMAWSAccountBadRequest() *GetCSPMAWSAccountBadRequest {
	return &GetCSPMAWSAccountBadRequest{}
}

/*
GetCSPMAWSAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCSPMAWSAccountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this get Cspm Aws account bad request response has a 2xx status code
func (o *GetCSPMAWSAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws account bad request response has a 3xx status code
func (o *GetCSPMAWSAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws account bad request response has a 4xx status code
func (o *GetCSPMAWSAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Cspm Aws account bad request response has a 5xx status code
func (o *GetCSPMAWSAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws account bad request response a status code equal to that given
func (o *GetCSPMAWSAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get Cspm Aws account bad request response
func (o *GetCSPMAWSAccountBadRequest) Code() int {
	return 400
}

func (o *GetCSPMAWSAccountBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAWSAccountBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountBadRequest  %+v", 400, o.Payload)
}

func (o *GetCSPMAWSAccountBadRequest) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *GetCSPMAWSAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSAccountForbidden creates a GetCSPMAWSAccountForbidden with default headers values
func NewGetCSPMAWSAccountForbidden() *GetCSPMAWSAccountForbidden {
	return &GetCSPMAWSAccountForbidden{}
}

/*
GetCSPMAWSAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCSPMAWSAccountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this get Cspm Aws account forbidden response has a 2xx status code
func (o *GetCSPMAWSAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws account forbidden response has a 3xx status code
func (o *GetCSPMAWSAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws account forbidden response has a 4xx status code
func (o *GetCSPMAWSAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Cspm Aws account forbidden response has a 5xx status code
func (o *GetCSPMAWSAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws account forbidden response a status code equal to that given
func (o *GetCSPMAWSAccountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get Cspm Aws account forbidden response
func (o *GetCSPMAWSAccountForbidden) Code() int {
	return 403
}

func (o *GetCSPMAWSAccountForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAWSAccountForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountForbidden  %+v", 403, o.Payload)
}

func (o *GetCSPMAWSAccountForbidden) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *GetCSPMAWSAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSAccountTooManyRequests creates a GetCSPMAWSAccountTooManyRequests with default headers values
func NewGetCSPMAWSAccountTooManyRequests() *GetCSPMAWSAccountTooManyRequests {
	return &GetCSPMAWSAccountTooManyRequests{}
}

/*
GetCSPMAWSAccountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetCSPMAWSAccountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get Cspm Aws account too many requests response has a 2xx status code
func (o *GetCSPMAWSAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws account too many requests response has a 3xx status code
func (o *GetCSPMAWSAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws account too many requests response has a 4xx status code
func (o *GetCSPMAWSAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Cspm Aws account too many requests response has a 5xx status code
func (o *GetCSPMAWSAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get Cspm Aws account too many requests response a status code equal to that given
func (o *GetCSPMAWSAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get Cspm Aws account too many requests response
func (o *GetCSPMAWSAccountTooManyRequests) Code() int {
	return 429
}

func (o *GetCSPMAWSAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAWSAccountTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCSPMAWSAccountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetCSPMAWSAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCSPMAWSAccountInternalServerError creates a GetCSPMAWSAccountInternalServerError with default headers values
func NewGetCSPMAWSAccountInternalServerError() *GetCSPMAWSAccountInternalServerError {
	return &GetCSPMAWSAccountInternalServerError{}
}

/*
GetCSPMAWSAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCSPMAWSAccountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationAWSAccountResponseV2
}

// IsSuccess returns true when this get Cspm Aws account internal server error response has a 2xx status code
func (o *GetCSPMAWSAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Cspm Aws account internal server error response has a 3xx status code
func (o *GetCSPMAWSAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Cspm Aws account internal server error response has a 4xx status code
func (o *GetCSPMAWSAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Cspm Aws account internal server error response has a 5xx status code
func (o *GetCSPMAWSAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Cspm Aws account internal server error response a status code equal to that given
func (o *GetCSPMAWSAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get Cspm Aws account internal server error response
func (o *GetCSPMAWSAccountInternalServerError) Code() int {
	return 500
}

func (o *GetCSPMAWSAccountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAWSAccountInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-cspm-aws/entities/account/v1][%d] getCspmAwsAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCSPMAWSAccountInternalServerError) GetPayload() *models.RegistrationAWSAccountResponseV2 {
	return o.Payload
}

func (o *GetCSPMAWSAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationAWSAccountResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
